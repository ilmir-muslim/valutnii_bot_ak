import asyncio
import logging
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from services import google_currency, p2p_rates
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}  # {chat_id: message_id}

@router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏
    sent_message = await message.answer("‚åõ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
    active_users[message.chat.id] = sent_message.message_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await update_and_send_rates(message.chat.id, bot)

@router.message(Command("stop"))
async def cmd_stop(message: types.Message):
    if message.chat.id in active_users:
        del active_users[message.chat.id]
        await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        await message.answer("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")

async def update_and_send_rates(chat_id: int, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        response = await fetch_new_rates()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chat_id in active_users:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=active_users[chat_id],
                text=response
            )
            logger.info(f"Updated rates for user {chat_id}")
    except TelegramBadRequest as e:
        if "message to edit not found" in str(e).lower():
            logger.warning(f"Message not found for user {chat_id}, removing from active")
            if chat_id in active_users:
                del active_users[chat_id]
    except Exception as e:
        logger.error(f"Update error for user {chat_id}: {e}")

async def fetch_new_rates():
    logger.info("Fetching new rates data...")
    update_time = datetime.now().strftime("%H:%M:%S")
    response = f"üëã <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</b> ({update_time})\n\n"
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        currency_task = asyncio.create_task(google_currency.get_currency_rates())
        
        # –í–†–ï–ú–ï–ù–ù–û: –§–∏–∫—Ç–∏–≤–Ω—ã–µ P2P-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        p2p_data = [("Binance", 90.5), ("Bybit", 91.2), ("OKX", 90.8)]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
        currency_rates = await asyncio.wait_for(currency_task, timeout=30.0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if currency_rates:
            currency_lines = []
            for from_cur, to_cur, rate in currency_rates:
                currency_lines.append(f"{from_cur.upper():<5} ‚Üí {to_cur.upper():<5} {rate:>8}")
            response += "üìä <b>–í–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n<code>" + "\n".join(currency_lines) + "</code>\n\n"
        else:
            response += "‚ö†Ô∏è <b>–í–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º P2P –¥–∞–Ω–Ω—ã–µ
        if p2p_data:
            p2p_lines = []
            for exchange, rate in p2p_data:
                rate_str = f"{rate:.2f}" if isinstance(rate, float) else str(rate)
                p2p_lines.append(f"{exchange:<8} {rate_str:>10}")
            response += "üí± <b>P2P USDT/RUB:</b>\n<code>" + "\n".join(p2p_lines) + "</code>"
        else:
            response += "‚ö†Ô∏è <b>P2P –∫—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>"
            
    except Exception as e:
        logger.exception(f"Error fetching rates: {e}")
        response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    return response

async def periodic_update(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    while True:
        try:
            logger.info("Running periodic update...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = list(active_users.items())
            for chat_id, message_id in users:
                await update_and_send_rates(chat_id, bot)
                
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)
            
        except Exception as e:
            logger.exception(f"Periodic update error: {e}")
            await asyncio.sleep(10)