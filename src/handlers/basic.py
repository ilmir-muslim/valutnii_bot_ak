import asyncio
import logging
from datetime import datetime
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from services import fiat_rates
from services.get_binance_rates import get_binance_rates
from services.get_bybit_rates import get_bybit_average_price
from services.get_okx_rates import get_okx_average_price
from functools import partial
from concurrent.futures import ThreadPoolExecutor

router = Router()
logger = logging.getLogger(__name__)

active_users = {}  # {chat_id: message_id}
executor = ThreadPoolExecutor(max_workers=2)


@router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    sent_message = await message.answer("‚åõ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
    active_users[message.chat.id] = sent_message.message_id
    await update_and_send_rates(message.chat.id, bot)


@router.message(Command("stop"))
async def cmd_stop(message: types.Message):
    if message.chat.id in active_users:
        del active_users[message.chat.id]
        await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        await message.answer("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")


async def fetch_current_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è API
        currency_task = asyncio.create_task(fiat_rates.get_currency_rates())
        binance_task = asyncio.create_task(get_binance_rates("USDT/AED"))
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ executor
        loop = asyncio.get_running_loop()
        bybit_func = partial(get_bybit_average_price, "USDT/AED")
        okx_func = partial(get_okx_average_price, "USDT/AED")
        
        bybit_task = loop.run_in_executor(executor, bybit_func)
        okx_task = loop.run_in_executor(executor, okx_func)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(
            currency_task, 
            binance_task, 
            bybit_task, 
            okx_task,
            return_exceptions=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        )
        
        return results
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return [None, None, None, None]


async def format_response(data, update_time):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    response = f"üëã <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</b> ({update_time})\n\n"
    currency_rates, binance_rate, bybit_rate, okx_rate = data

    if currency_rates and not isinstance(currency_rates, Exception):
        currency_lines = []
        for from_cur, to_cur, rate in currency_rates:
            currency_lines.append(f"{from_cur.upper():<5} ‚Üí {to_cur.upper():<5} {rate:>8}")
        response += "üìä <b>–í–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n<code>" + "\n".join(currency_lines) + "</code>\n\n"
    else:
        response += "‚ö†Ô∏è <b>–í–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"

    p2p_data = [
        ("Binance", binance_rate),
        ("Bybit", bybit_rate),
        ("OKX", okx_rate)
    ]
    
    p2p_lines = []
    for exchange, rate in p2p_data:
        if isinstance(rate, (float, int)):
            rate_str = f"{rate:.2f}"
        elif isinstance(rate, Exception):
            rate_str = f"–û—à–∏–±–∫–∞: {type(rate).__name__}"
        else:
            rate_str = str(rate)
        
        p2p_lines.append(f"{exchange:<8} {rate_str:>10}")
    
    response += "üí± <b>P2P USDT/AED:</b>\n<code>" + "\n".join(p2p_lines) + "</code>"
    
    return response


async def update_and_send_rates(chat_id: int, bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = await fetch_current_data()
        update_time = datetime.now().strftime("%H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await format_response(current_data, update_time)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id in active_users:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=active_users[chat_id],
                text=response
            )
            logger.info(f"Updated rates for user {chat_id}")
            
    except TelegramBadRequest as e:
        if "message to edit not found" in str(e).lower():
            logger.warning(f"Message not found for user {chat_id}, removing from active")
            if chat_id in active_users:
                del active_users[chat_id]
    except Exception as e:
        logger.error(f"Update error for user {chat_id}: {e}")


async def periodic_update(bot: Bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            current_data = await fetch_current_data()
            update_time = datetime.now().strftime("%H:%M:%S")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            response = await format_response(current_data, update_time)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users = list(active_users.items())
            for chat_id, message_id in users:
                try:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=response
                    )
                except TelegramBadRequest as e:
                    if "message to edit not found" in str(e).lower():
                        logger.warning(f"Message not found for user {chat_id}, removing from active")
                        if chat_id in active_users:
                            del active_users[chat_id]
                except Exception as e:
                    logger.error(f"Error updating user {chat_id}: {e}")

            # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await asyncio.sleep(300)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ periodic_update: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ