from services.fiat_rates import fetch_rate
from services.get_bybit_rates import get_bybit_prices
from services.get_binance_rates import get_binance_prices

P2P_CORRECTION = 1        # –±—É—Ñ–µ—Ä –Ω–∞ –ø–µ—Ä–≤—É—é —Ü–µ–Ω—É
MARKUP_BUY = 0.035           # –ù–∞—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ AED (–ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–∞—Ç)
MARKDOWN_SELL = 0.035        # –°–∫–∏–¥–∫–∞ –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ AED (–æ—Ç–¥–∞—ë—Ç —Ñ–∏–∞—Ç)
GOOGLE_MARKUP = 0.03         # –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ Google –∫—É—Ä—Å
CURRENCIES = {
    "RUB": "bybit",
    "KZT": "binance",
    "KGS": "binance",
}

async def generate_exchange_text() -> str:
    results = []
    aed_prices = get_bybit_prices("USDT/AED")  # AED –ø—Ä–æ–¥–∞—é—Ç/–ø–æ–∫—É–ø–∞—é—Ç

    if not aed_prices or not aed_prices.get("buy") or not aed_prices.get("sell"):
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è USDT/AED"

    for fiat, source in CURRENCIES.items():
        if source == "bybit":
            fiat_prices = get_bybit_prices(f"USDT/{fiat}")
        else:
            fiat_prices = await get_binance_prices(f"USDT/{fiat}")

        if not fiat_prices or isinstance(fiat_prices, str):
            results.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è USDT/{fiat}")
            continue

        try:
            # –ü–æ–∫—É–ø–∫–∞ AED –∑–∞ —Ñ–∏–∞—Ç (–æ—Ç–¥–∞—ë–º —Ñ–∏–∞—Ç ‚Üí –ø–æ–ª—É—á–∞–µ–º AED) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º 3.5%
            raw_buy = fiat_prices["sell"] / aed_prices["buy"]
            adjusted_buy = raw_buy * P2P_CORRECTION
            final_buy = round(adjusted_buy * (1 + MARKUP_BUY), 2)

            # –ü–æ–∫—É–ø–∫–∞ —Ñ–∏–∞—Ç–∞ –∑–∞ AED (–æ—Ç–¥–∞—ë–º AED ‚Üí –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–∞—Ç) ‚Äî –≤—ã—á–∏—Ç–∞–µ–º 3.5%
            raw_sell = fiat_prices["buy"] / aed_prices["sell"]
            adjusted_sell = raw_sell * P2P_CORRECTION
            final_sell = round(adjusted_sell * (1 - MARKDOWN_SELL), 4)

            # –ö—É—Ä—Å –æ—Ç Google: AED ‚Üí —Ñ–∏–∞—Ç
            _, _, google_raw = await fetch_rate("AED", fiat)
            if google_raw and google_raw != "N/A":
                google_raw = float(google_raw)
                google_up = round(google_raw * (1 + GOOGLE_MARKUP), 2)
                google_down = round(google_raw * (1 - GOOGLE_MARKUP), 4)
                google_block = (
                    f"\nüìå –ö—É—Ä—Å –æ—Ç Google:\n"
                    f"–ü–æ–∫—É–ø–∫–∞ AED –∑–∞ {fiat}: = {google_raw} +3% = {google_up}\n"
                    f"–ü–æ–∫—É–ø–∫–∞ {fiat} –∑–∞ AED: = {google_raw} -3% = {google_down}"
                )
            else:
                google_block = "\nüìå –ö—É—Ä—Å –æ—Ç Google: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            results.append(
                f"<b>üí± –û–±–º–µ–Ω {fiat} ‚Üî AED ({source})</b>\n"
                f"üî∏ –ü–æ–∫—É–ø–∫–∞ AED –∑–∞ {fiat} = {round(raw_buy, 4)} +3.5% = {final_buy}\n"
                f"üî∏ –ü–æ–∫—É–ø–∫–∞ {fiat} –∑–∞ AED = {round(raw_sell, 4)} -3.5% = {final_sell}"
                f"{google_block}\n"
            )
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è {fiat}: {e}")

    return "\n".join(results)
